

type Room @model
 @auth (
    rules: [
      { allow: public, operations: [create, update, delete, read] }
    ]
  )
  @key(fields: ["uuid"])
  {
  uuid: ID!
  gameType: String!
  moveables: [Moveable] @connection(keyName: "moveableByRoom", fields: ["uuid"])
  # card: [Card] @connection(keyName: "cardsByRoom", fields: ["id"])

}

type Moveable @model
 @auth (
    rules: [
      { allow: public, operations: [create, update, delete, read] }
    ]
  )
  @key(fields: ["uuid", "roomId"])
  @key(name: "moveableByRoom", fields: ["roomId"], queryField: "moveableByRoom")
  {
    uuid: ID! # uuid, partition key
    roomId: ID! # sort key
    draggable: Boolean!
    x: Int! 
    y: Int! 
    z: Int!
    lastOwner: String!
    inMotion: Boolean! 
    type: String!
}

type Card @model
 @auth (
    rules: [
      { allow: public, operations: [create, update, delete, read] }
    ]
  )
  @key(fields: ["id"])
  # @key(name: "cardsByRoom", fields: ["roomId", "id"], queryField: "cardsByRoom")
  # @key(name: "cardsByOwner", fields: ["ownerId", "id"], queryField: "cardsByOwner")
  {
  id: ID!
  roomId: ID!
  ownerId: ID!
  faceUp: Boolean!
  cardValue: String!
}

type Player @model
 @auth (
    rules: [
      { allow: public, operations: [create, update, delete, read] }
    ]
  )
  @key(fields: [ "id"])
  {
  id: ID!
  roomId: ID!
  name: String!
  # moveable: Moveable @connection
  # cards: [Card] @connection(keyName: "cardsByOwner", fields: ["id"])
}

# Next up:
# type CardStack @model
#   @key(fields: ["id"])
#   @key(name: "cardStacksByRoom", fields: ["roomId"], queryField: "cardStacksByRoom")
#   {
#   id: ID!
#   roomId: ID!
#   spread: Boolean!
#   moveable: Moveable @connection(keyName: "id", fields: ["id"])
#   card: [Card] @connection(keyName: "playersByRoom", fields: ["roomId"])
# }

