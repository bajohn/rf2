import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { API, graphqlOperation } from 'aws-amplify';
import { cardsByRoomFull } from 'src/graphql/customqueries';
import { CardsByRoomFullQuery, CardsByRoomQueryVariables } from '../API.service';


@Injectable({
  providedIn: 'root'
})
export class MoveableService {

  readonly roomId: string;
  private cards: card[];
  private lookup: moveable[];

  constructor(
    private router: Router,

  ) {
    this.roomId = this.router.url.substring(1);
    this.listCards();

  }

  // cut from room.component
  // TODO finish this!
  private async listCards() {
    const listParams: CardsByRoomQueryVariables = {
      roomId: this.roomId
    };
    const resp = await API.graphql(graphqlOperation(cardsByRoomFull, listParams)) as { data: CardsByRoomFullQuery };
    const roomCardsResp = resp.data.cardsByRoom.items;
    console.log(roomCardsResp);

    roomCardsResp.forEach(el => {
      const cardObjToPush: card = {
        roomId: this.roomId,
        cardValue: el.cardValue,
        x: el.moveable.x,
        y: el.moveable.y,
        z: el.moveable.z,
        inMotion: el.moveable.inMotion,
        faceUp: el.faceUp,
        lastUpdated: (new Date(el.moveable.updatedAt)).getTime(),
        lastOwner: el.moveable.lastOwner,
        moveableId: el.moveable.
      }
      this.cards[el.cardValue] = cardObjToPush;
    });

    // Shouldn't need this anymore
    //this.cardValues = resp.data.cardsByRoom.items.map(el => el.cardValue);

    // All cards of room in one subscription
    // // 
    // One subcsription per moveable
    const vars = {
      roomId: this.roomId,
    };
    // TODO: can this specific type be specified in autogenerated ts?
    // should be OnUpdateCardSubscription insteady of `any`
    const obs = API.graphql(graphqlOperation(onUpdateMoveable, vars)) as Observable<object>;

    obs.subscribe({
      next: (resp: { value: { data: OnUpdateMoveableSubscription } }) => {
        console.log('trigger');
        const updatedCard = resp.value.data.onUpdateMoveable;

        const localCard = this.cards['AD'];
        const updateTime = (new Date(updatedCard.updatedAt)).getTime();
        if (!localCard.inMotion
          && this.playerId !== updatedCard.lastOwner
          && updateTime > localCard.lastUpdateTime) {
          const copyProps = {
            cardX: updatedCard.x,
            cardY: updatedCard.y,
            cardZ: updatedCard.z,
            //faceUp: updatedCard.faceUp,
            lastOwner: updatedCard.lastOwner,
            lastUpdateTime: updateTime
          };
          Object.assign(localCard, copyProps);
        }

      }
    });
  }
}
